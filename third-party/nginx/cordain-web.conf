http {
	include       mime.types;
	default_type  application/octet-stream;

	log_format  main	'[$time_iso8601] [v1] '
						'[$host] [$scheme] [$request_method] [$request_uri] [$server_protocol] [$query_string] '
						'[$request_length] [$content_type] [$content_length] '
						'[$status] [$bytes_sent] [$body_bytes_sent] [$http_referer] [$http_user_agent] [$request_time] '
						'[$http_x_forwarded_for] [$http_x_forwarded_port] [$server_addr] [$server_port] '
						'[$server_name] [$connection] [$connection_requests] '
						'[$request_completion] [$remote_addr] [$remote_port] [$remote_user]';

	# Buffer log writes to speed up IO, or disable them altogether
	#access_log off;
	access_log  /logs/access.log     main;
	error_log   /logs/error.log      warn;

	# Sendfile copies data between one FD and other from within the kernel.
	# More efficient than read() + write(), since the requires transferring data to and from the user space.
	sendfile on;

	# Tcp_nopush causes nginx to attempt to send its HTTP response head in one packet, instead
	# of using partial frames. This is useful for prepending headers before calling sendfile,
	# or for throughput optimization.
	tcp_nopush on;

	# Don't buffer data-sends (disable Nagle algorithm). Good for sending frequent small bursts of data in real time.
	tcp_nodelay on;

	# Timeout for keep-alive connections. Server will close connections after this time.
	keepalive_timeout 30;

	# Number of requests a client can make over the keep-alive connection. This is set high for testing.
	keepalive_requests        1000;

	# Allow the server to close the connection after a client stops responding. Frees up socket-associated memory.
	reset_timedout_connection on;

	# Send the client a "request timed out" if the body is not loaded by this time. Default 60.
	client_body_timeout 10;

	# For security reasons hide nginx version
	server_tokens             off;

	# DNS resolver
	resolver 8.8.8.8;

	client_max_body_size       10m;
	chunked_transfer_encoding  on;

	# Caches information about open FDs, freqently accessed files.
	# Changing this setting, in my environment, brought performance up from 560k req/sec, to 904k req/sec.
	# I recommend using some varient of these options, though not the specific values listed below.
	open_file_cache          max=200000 inactive=30s;
	open_file_cache_valid    30s;
	open_file_cache_min_uses 2;
	open_file_cache_errors   on;

	# Compression. Reduces the amount of data that needs to be transferred over the network
	gzip            on;
	gzip_min_length 1024;
	gzip_proxied    expired no-cache no-store private auth;
	gzip_types      text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
	gzip_disable    "MSIE [1-6]\.";

	server {
		listen       80;
		server_name  localhost;

		# Protect . files (hidden files)
		location ~ /\. {
			access_log logs/access.log main;
			log_not_found on;
			deny all;
		}

		location = /healthcheck {
			access_log logs/access.log main;
			echo "ok";
		}

		location = /meta/healthcheck {
			access_log logs/access.log main;
			echo "ok";
		}

		location = /_hostmanager/healthcheck {
			access_log logs/access.log main;
			echo "ok";
		}

		location / {
			root   html;
			index  index.html index.htm;
		}

		error_page  404              /404.html;

		# redirect server error pages to the static page /50x.html
		error_page   500 502 503 504  /50x.html;
		location = /50x.html {
			root   html;
		}
	}

	include /usr/local/nginx/conf/stackdriver.conf;
}

